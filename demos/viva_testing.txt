--extremely simple, ignore all bad practices
--recoding next update

--@name Viva Testing
--@author Elias
--@include VivaGUI/vivagui.lua
--@client

require("VivaGUI/vivagui.lua")

testColor=Color(255,255,0)
samples={}
bool=false
size=10
offsetx=0
offsety=0
debug=false

viva:new("My first tool",{
    width=170,
    height=140
},nil,function(self)
    self:newMenu("File",{
        {
            "Open..",
            function()end,
            "Ctrl+O"
        },
        {
            "Save",
            function()end,
            "Ctrl+S"
        },
        {
            "Close",
            function(self)
                table.removeByValue(viva.windows,self)

                hitboxes.purge()
            end,
            "Ctrl+W"
        }
    })

    self:colorEdit4("Color","testColor")

    self:plotLines("Samples",samples)
    
    self:textColored("Important stuff!",testColor)
    
    self:checkbox("debug hitboxes","debug")
    
    self:ratioButton("size: 10","size",10)

    self:sameLine()

    self:ratioButton("size: 20","size",20)
    
    self:sameLine()

    self:ratioButton("size: 30","size",30)
end)

viva:new("style editor",{
    width=150,
    height=270,
    x=300,
    y=70,
    --active=false
},nil,function(self)
    windowBg=colors.windowBg
    border=colors.border
    frameBg=colors.frameBg
    menuBarBg=colors.menuBarBg
    windowRounding=style.windowRounding
    frameRounding=style.frameRounding
    windowBorder=style.windowBorder and 1 or 0
    grabRounding=style.grabRounding
    margin=style.windowPadding[1]
    
    self:button("bleh5",function()
        print("real")
    end)
    
    self:collapsingHeader("test",{})

    self:colorEdit4("Color","windowBg")
    self:colorEdit4("Color","border")
    self:colorEdit4("Color","frameBg")
    self:colorEdit4("Color","menuBarBg")
    
    self:endHeader()
    
    self:separatorText("Main")
    
    self:button("bleh",function()
        print("real")
    end)
    
    self:sameLine()
    self:pushStyle({
        button=Color(255,0,0)
    })
    
    self:button("bleh2222",function()
        print("real2")
    end)
    
    self:sameLine()
    
    self:button("bleh",function()
        print("real3")
    end)
    
    self:sameLine()
    
    self:button("bleh",function()
        print("real4")
    end)
    
    self:popStyle()
    
    self:separatorText("Borders")
    
    self:slider("windowBorder","windowBorder",{
        min=0,
        max=1,
    },function(float)
        style.windowBorder=float==1 and true or false
        
        return string.format("%.0f",float)
    end)
    
    self:separatorText("Rounding")
    
    self:slider("windowRounding","windowRounding",{
        min=0,
        max=12,
    },function(float)
        style.windowRounding=windowRounding
    
        return string.format("%.0f",float)
    end)
    
    self:slider("frameRounding","frameRounding",{
        min=0,
        max=12,
    },function(float)
        style.frameRounding=frameRounding
        
        render.setColor(Color((360/12)*float,1,1):hsvToRGB())
        
        return string.format("%.0f",float)
    end)
    
    self:slider("grabRounding","grabRounding",{
        min=0,
        max=12,
    },function(float)
        style.grabRounding=grabRounding
        
        return string.format("%.0f",float)
    end)
    
    self:separatorText("Testing")

    self:slider("cube size","size",{
        min=10,
        max=200,
    },function(float)        
        return string.format("%.1f",float)
    end)
    
    self:slider("offset X","offsetx",{
        min=-500,
        max=500,
    },function(float)        
        return string.format("%.1f",float)
    end)
    
    self:slider("offset Y","offsety",{
        min=-500,
        max=500,
    },function(float)        
        return string.format("%.1f",float)
    end)
    
    self:slider("margin left","margin",{
        min=0,
        max=20,
    },function(float)
        style.windowPadding[1]=float
              
        return string.format("%.0f",float)
    end)
    
    for i=1,4 do
        self:checkbox("checkbox"..i,"bool")
    end
    
    --self:collapsingHeader("test2")
end)

hook.add("render","",function()
    frameBg=colors.frameBg
    
    for i=1,25 do
        samples[i]=math.sin(i*0.4+timer.realtime()*3)*5
    end
    
    if bool then
        colors.frameBg=Color(timer.realtime()*20,1,0.5):hsvToRGB()
    end
    
    render.drawRect(512-size/2+offsetx,512/2-size/2+offsety,size,size)
    
    viva.render()
    
    if debug then
        hitboxes.renderDebug()
    end
end)