--extremely simple, ignore all bad practices
--recoding next update

--@name Viva Testing
--@author Elias
--@include VivaGUI/vivagui.lua
--@client

require("VivaGUI/vivagui.lua")

testColor=Color(255,255,0)
samples={}
bool=false

viva:new("My first tool",{
    width=170,
    height=140
},nil,function(self)
    self:newMenu("File",{
        {
            "Open..",
            function()end,
            "Ctrl+O"
        },
        {
            "Save",
            function()end,
            "Ctrl+S"
        },
        {
            "Close",
            function(self)
                viva.windows[self.name]=nil
                self=nil
            end,
            "Ctrl+W"
        }
    })

    self:colorEdit4("Color","testColor")

    self:plotLines("Samples",samples)
    
    self:textColored("Important stuff!",testColor)
end)

viva:new("style editor",{
    width=150,
    height=250,
    x=300,
    y=70
},nil,function(self)
    windowBg=colors.windowBg
    border=colors.border
    frameBg=colors.frameBg
    menuBarBg=colors.menuBarBg
    windowRounding=style.windowRounding
    frameRounding=style.frameRounding
    windowBorderSize=style.windowBorderSize
    grabRounding=style.grabRounding
    
    self:textColored("Important stuff!",testColor)
    
    self:colorEdit4("Color","windowBg")
    self:colorEdit4("Color","border")
    self:colorEdit4("Color","frameBg")
    self:colorEdit4("Color","menuBarBg")
    
    self:separatorText("Main")
    
    self:button("bleh",function()
        print("real")
    end)
    
    self:sameLine()
    self:pushStyle({
        button=Color(255,0,0)
    })
    
    self:button("bleh",function()
        print("real")
    end)
    
    self:sameLine()
    
    self:button("bleh",function()
        print("real")
    end)
    
    self:sameLine()
    
    self:button("bleh",function()
        print("real")
    end)
    
    self:popStyle()
    
    self:checkbox("bool","checkbox")
    
    self:separatorText("Borders")
    
    self:sliderFloat("windowBorderSize","windowBorderSize",{
        min=0,
        max=1,
    },function(float)
        style.windowBorderSize=windowBorderSize
        
        return string.format("%.0f",float)
    end)
    
    self:separatorText("Rounding")
    
    self:sliderFloat("windowRounding","windowRounding",{
        min=0,
        max=20,
    },function(float)
        style.windowRounding=windowRounding
    
        return string.format("%.0f",float)
    end)
    
    self:sliderFloat("frameRounding","frameRounding",{
        min=0,
        max=12,
    },function(float)
        style.frameRounding=frameRounding
        
        render.setColor(Color((360/12)*float,1,1):hsvToRGB())
        
        return string.format("%.0f",float)
    end)
    
    self:sliderFloat("grabRounding","grabRounding",{
        min=0,
        max=12,
    },function(float)
        style.grabRounding=grabRounding
        
        return string.format("%.0f",float)
    end)
end)

hook.add("render","",function()
    for i=1,25 do
        samples[i]=math.sin(i*0.4+timer.realtime()*3)*5
    end
    
    if bool then
        colors.frameBg=Color(timer.realtime()*20,1,0.5):hsvToRGB()
    end
    
    viva:render()
    --hitboxes.renderDebug()
end)